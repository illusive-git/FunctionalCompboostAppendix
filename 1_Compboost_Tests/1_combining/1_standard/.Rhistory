plot(fun_age)
#
library(compboost)
library(FDboost)
# ----------------------------
# Creating Data
set.seed(-753)
obs = 10000
df_train = data.frame(
Age = round(runif(n = obs, 18, 99)),
Height = rnorm(obs, 165, 10)
)
fun_age = function(x){ ( 0.00001*x^4 - x^2 + 1/x) / 10000 }
fun_height = function(x){( sin(x) )}
df_train$target = fun_age(df_train$Age) + fun_height(df_train$Height) + rnorm(100,0,0.1)
plot(fun_age)
plot(fun_height)
plot(fun_age, xlim = c(min(df_train$Age),max(df_train$Age)))
plot(fun_age, xlim = c(min(df_train$Age),max(df_train$Age)))
plot(fun_height, xlim = c(min(df_train$Height),max(df_train$Height)))
seq(0,1)
seq(0,1, by 0.1)
seq(0,1, by =0.1)
grid_Age = seq(min(df_train$Age),max(df_train$Age), by =0.01)
grid_Age
plot(grid_Age,fun_age(grid_Age))
plot(grid_Age,fun_age(grid_Age), type = "l")
grid_Age = seq(min(df_train$Age),max(df_train$Age), by =0.01)
grid_Height = seq(min(df_train$Height),max(df_train$Height), by =0.01)
plot(grid_Age,fun_age(grid_Age), type = "l", main = "Additive effect of Age")
plot(grid_Height,fun_height(grid_Height), main = "Additive effect of Heigt")
par(mfrow = c(1,2))
grid_Age = seq(min(df_train$Age),max(df_train$Age), by =0.01)
grid_Height = seq(min(df_train$Height),max(df_train$Height), by =0.01)
plot(grid_Age,fun_age(grid_Age), type = "l", main = "Additive effect of Age")
plot(grid_Height,fun_height(grid_Height),type = "l", main = "Additive effect of Heigt")
par(mfrow = c(1,1))
par(mfrow = c(1,2))
grid_Age = seq(min(df_train$Age),max(df_train$Age), by =0.01)
grid_Height = seq(min(df_train$Height),max(df_train$Height), by =0.01)
plot(grid_Age,fun_age(grid_Age), type = "l", main = "Additive effect of Age")
plot(grid_Height,fun_height(grid_Height),type = "l", main = "Additive effect of Height")
par(mfrow = c(1,1))
# one iteration
cp = Compboost$new(data = df_train, target = "target",loss = LossQuadratic$new(), learning_rate = 0.3)
cp$addBaselearner(feature = "Age", id = "ols", bl_factory = BaselearnerPolynomial, intercept = TRUE, degree = 1)
cp$addBaselearner(feature = "Height", id = "spline", bl_factory = BaselearnerPSpline, degree = 3, n_knots = 14, differences = 2, penalty = 0)
cp$CombineBaselearners(bl1 = "Age_ols", bl2 = "Height_spline", keep = FALSE)
cp$train(1)
mb = mboost(formula = target ~ bols(Age, intercept = TRUE, lambda = 0) %X% bbs(Height, degree = 3, knots = 14, differences = 2, lambda = 0),
data = df_train, control = boost_control(mstop = 1, nu = 0.3))
plot(coef(mb)[[1]], col = "red", pch = 5, main = "Beta Parameters - 1 Iteration", ylab = expression(paste(beta,"-value")))
points(cp$getEstimatedCoef()[[1]], col = "blue", pch = 3)
legend("topright", legend = c("FDboost","Compboost"), col = c("red","blue"),pch = c(5,3))
# one iteration
cp = Compboost$new(data = df_train, target = "target",loss = LossQuadratic$new(), learning_rate = 0.3)
cp$addBaselearner(feature = "Age", id = "ols", bl_factory = BaselearnerPolynomial, intercept = TRUE, degree = 1)
cp$addBaselearner(feature = "Height", id = "spline", bl_factory = BaselearnerPSpline, degree = 3, n_knots = 21, differences = 2, penalty = 0)
cp$CombineBaselearners(bl1 = "Age_ols", bl2 = "Height_spline", keep = FALSE)
cp$train(1)
mb = mboost(formula = target ~ bols(Age, intercept = TRUE, lambda = 0) %X% bbs(Height, degree = 3, knots = 21, differences = 2, lambda = 0),
data = df_train, control = boost_control(mstop = 1, nu = 0.3))
plot(coef(mb)[[1]], col = "red", pch = 5, main = "Beta Parameters - 1 Iteration", ylab = expression(paste(beta,"-value")))
points(cp$getEstimatedCoef()[[1]], col = "blue", pch = 3)
legend("topright", legend = c("FDboost","Compboost"), col = c("red","blue"),pch = c(5,3))
plot(coef(mb)[[1]], col = "red", pch = 5, main = "Beta Parameters - 1 Iteration", ylab = expression(paste(beta,"-value")))
points(cp$getEstimatedCoef()[[1]], col = "blue", pch = 3)
legend("topright", legend = c("FDboost","Compboost"), col = c("red","blue"),pch = c(5,3))
plot(coef(mb)[[1]], col = "red", pch = 5, main = "Beta Parameters - 1 Iteration", ylab = expression(paste(beta,"-value")), ylim = c(-1,1))
plot(coef(mb)[[1]], col = "red", pch = 5, main = "Beta Parameters - 1 Iteration", ylab = expression(paste(beta,"-value")), ylim = c(-5,5))
points(cp$getEstimatedCoef()[[1]], col = "blue", pch = 3)
legend("topright", legend = c("FDboost","Compboost"), col = c("red","blue"),pch = c(5,3))
# ten iterations
cp = Compboost$new(data = df_train, target = "target",loss = LossQuadratic$new(), learning_rate = 0.3)
cp$addBaselearner(feature = "Age", id = "ols", bl_factory = BaselearnerPolynomial, intercept = TRUE, degree = 1)
cp$addBaselearner(feature = "Height", id = "spline", bl_factory = BaselearnerPSpline, degree = 3, n_knots = 14, differences = 2, penalty = 0)
cp$CombineBaselearners(bl1 = "Age_ols", bl2 = "Height_spline", keep = FALSE)
cp$train(1000)
mb = mboost(formula = target ~ bols(Age, intercept = TRUE, lambda = 0) %X% bbs(Height, degree = 3, knots = 14, differences = 2, lambda = 0),
data = df_train, control = boost_control(mstop = 1000, nu = 0.3))
plot(coef(mb)[[1]], col = "red", pch = 5, main = "Beta Parameters - 1000 Iteration", ylab = expression(paste(beta,"-value")))
points(cp$getEstimatedCoef()[[1]], col = "blue", pch = 3)
legend("topright", legend = c("FDboost","Compboost"), col = c("red","blue"),pch = c(5,3))
# Differences
fdb_predict = mb$predict()
cpb_predict = cp$predict()
mean( (fdb_predict - cpb_predict)^2)
# one iteration
cp = Compboost$new(data = df_train, target = "target",loss = LossQuadratic$new(), learning_rate = 0.3)
cp$addBaselearner(feature = "Age", id = "ols", bl_factory = BaselearnerPolynomial, intercept = TRUE, degree = 1)
cp$addBaselearner(feature = "Height", id = "spline", bl_factory = BaselearnerPSpline, degree = 3, n_knots = 21, differences = 2, penalty = 0)
cp$CombineBaselearners(bl1 = "Age_ols", bl2 = "Height_spline", keep = FALSE)
cp$train(1)
mb = mboost(formula = target ~ bols(Age, intercept = TRUE, lambda = 0) %X% bbs(Height, degree = 3, knots = 21, differences = 2, lambda = 0),
data = df_train, control = boost_control(mstop = 1, nu = 0.3))
plot(coef(mb)[[1]], col = "red", pch = 5, main = "Beta Parameters - 1 Iteration", ylab = expression(paste(beta,"-value")), ylim = c(-5,5))
points(cp$getEstimatedCoef()[[1]], col = "blue", pch = 3)
legend("topright", legend = c("FDboost","Compboost"), col = c("red","blue"),pch = c(5,3))
# Differences
fdb_predict = mb$predict()
cpb_predict = cp$predict()
mean( (fdb_predict - cpb_predict)^2)
# one iteration
cp = Compboost$new(data = df_train, target = "target",loss = LossQuadratic$new(), learning_rate = 0.3)
cp$addBaselearner(feature = "Age", id = "ols", bl_factory = BaselearnerPolynomial, intercept = TRUE, degree = 1)
cp$addBaselearner(feature = "Height", id = "spline", bl_factory = BaselearnerPSpline, degree = 3, n_knots = 21, differences = 2, penalty = 0)
cp$CombineBaselearners(bl1 = "Age_ols", bl2 = "Height_spline", keep = FALSE)
cp$train(1)
mb = mboost(formula = target ~ bols(Age, intercept = TRUE, lambda = 0) %X% bbs(Height, degree = 3, knots = 21, differences = 2, lambda = 0),
data = df_train, control = boost_control(mstop = 1, nu = 0.3))
plot(coef(mb)[[1]], col = "red", pch = 5, main = "Beta Parameters - 1 Iteration", ylab = expression(paste(beta,"-value")), ylim = c(-5,5))
points(cp$getEstimatedCoef()[[1]], col = "blue", pch = 3)
legend("topright", legend = c("FDboost","Compboost"), col = c("red","blue"),pch = c(5,3))
mean( (fdb_predict - cpb_predict)^2)
# TESTS
library(mboost)
library(compboost)
library(Matrix)
# mboost Case
source("~/Documents/3_LMU/2_Master/1_Code/4_tensors/baselearner_minus.R")
# Compboost Case
data("cars")
df_train = cars
speed_4 =  mboost(dist ~bbs(speed, knots = 20, degree = 3, differences = 2, df = 4), data = cars, control = boost_control(mstop = 10, nu = 0.3))
lambda_speed_4 = lambda_from_mboost
speed_bols = mboost(dist ~bbs(speed, knots = 20, degree = 3, differences = 2, df = 3), data = cars, control = boost_control(mstop = 10, nu = 0.3))
test_hand = mboost(dist ~ bbs(speed, knots = 20, degree = 3, differences = 2, df = 4)
%-% bols(speed, intercept = TRUE, lambda=0), data = cars, control = boost_control(mstop = 10, nu = 0.3))
cb = Compboost$new(data = cars, target = "dist",loss = LossQuadratic$new(), learning_rate = 0.3)
cb$addBaselearner(feature = "speed", id = "spline", bl_factory = BaselearnerPSpline,  degree = 3, n_knots = 20, df = 4, differences = 2)
cb$addBaselearner(feature = "speed", id = "poly", bl_factory = BaselearnerPSpline,  degree = 3, n_knots = 20, df = 3, differences = 2)
cb$CenterBaselearner(bl_target = "speed_spline", bl_center = "speed_poly", keep = FALSE)
cb$removeBaselearner("speed_poly")
cb$train(10, trace = 0)
cb_eff = cb$getFeatEffectData(blearner_name = "speed_spline_|_speed_poly")
plot(cb_eff$feature, predict(test_hand, newdata = data.frame(speed=cb_eff$feature), which = 1), t = "l", col="red1",
xlab = "speed", ylab = "Additive Effect on dist", main = "Effect results - centered Learner", ylim = c(-10,10))
points(cb_eff$feature, cb_eff$effect, t = "l", col = "blue")
legend("top",legend = c("mboost","compboost"), fill = c("red","blue"))
# TESTS
library(mboost)
library(compboost)
library(Matrix)
# mboost Case
source("~/Documents/3_LMU/2_Master/1_Code/4_tensors/baselearner_minus.R")
# Compboost Case
data("cars")
df_train = cars
speed_4 =  mboost(dist ~bbs(speed, knots = 20, degree = 3, differences = 2, df = 4), data = cars, control = boost_control(mstop = 10, nu = 0.3))
lambda_speed_4 = lambda_from_mboost
speed_bols = mboost(dist ~bbs(speed, knots = 20, degree = 3, differences = 2, df = 3), data = cars, control = boost_control(mstop = 10, nu = 0.3))
test_hand = mboost(dist ~ bbs(speed, knots = 20, degree = 3, differences = 2, df = 4)
%-% bols(speed, intercept = TRUE, lambda=0), data = cars, control = boost_control(mstop = 10, nu = 0.3))
cb = Compboost$new(data = cars, target = "dist",loss = LossQuadratic$new(), learning_rate = 0.3)
cb$addBaselearner(feature = "speed", id = "spline", bl_factory = BaselearnerPSpline,  degree = 3, n_knots = 20, df = 4, differences = 2)
cb$addBaselearner(feature = "speed", id = "poly", bl_factory = BaselearnerPSpline,  degree = 3, n_knots = 20, df = 3, differences = 2)
cb$CenterBaselearner(bl_target = "speed_spline", bl_center = "speed_poly", keep = FALSE)
cb$removeBaselearner("speed_poly")
cb$train(10, trace = 0)
cb_eff = cb$getFeatEffectData(blearner_name = "speed_spline_|_speed_poly")
plot(cb_eff$feature, predict(test_hand, newdata = data.frame(speed=cb_eff$feature), which = 1), t = "l", col="red1",
xlab = "speed", ylab = "Additive Effect on dist", main = "Effect results - centered Learner", ylim = c(-10,10))
points(cb_eff$feature, cb_eff$effect, t = "l", col = "blue")
legend("top",legend = c("mboost","compboost"), fill = c("red","blue"))
cb = Compboost$new(data = cars, target = "dist",loss = LossQuadratic$new(), learning_rate = 0.3)
cb$addBaselearner(feature = "speed", id = "spline", bl_factory = BaselearnerPSpline,  degree = 3, n_knots = 20, df = 4, differences = 2)
cb$addBaselearner(feature = "speed", id = "poly", bl_factory = BaselearnerPSpline,  degree = 3, n_knots = 20, df = 2, differences = 2)
cb$CenterBaselearner(bl_target = "speed_spline", bl_center = "speed_poly", keep = FALSE)
cb$removeBaselearner("speed_poly")
cb$train(10, trace = 0)
cb_eff = cb$getFeatEffectData(blearner_name = "speed_spline_|_speed_poly")
plot(cb_eff$feature, predict(test_hand, newdata = data.frame(speed=cb_eff$feature), which = 1), t = "l", col="red1",
xlab = "speed", ylab = "Additive Effect on dist", main = "Effect results - centered Learner", ylim = c(-10,10))
points(cb_eff$feature, cb_eff$effect, t = "l", col = "blue")
legend("top",legend = c("mboost","compboost"), fill = c("red","blue"))
speed_4 =  mboost(dist ~bbs(speed, knots = 20, degree = 3, differences = 2, df = 4), data = cars, control = boost_control(mstop = 10, nu = 0.3))
lambda_speed_4 = lambda_from_mboost
speed_bols = mboost(dist ~bbs(speed, knots = 20, degree = 3, differences = 2, df = 3), data = cars, control = boost_control(mstop = 10, nu = 0.3))
test_hand = mboost(dist ~ bbs(speed, knots = 20, degree = 3, differences = 2, df = 4)
%-% bols(speed, intercept = TRUE, lambda=0), data = cars, control = boost_control(mstop = 10, nu = 0.3))
cb = Compboost$new(data = cars, target = "dist",loss = LossQuadratic$new(), learning_rate = 0.3)
cb$addBaselearner(feature = "speed", id = "spline", bl_factory = BaselearnerPSpline,  degree = 3, n_knots = 20, df = 4, differences = 2)
cb$addBaselearner(feature = "speed", id = "poly", bl_factory = BaselearnerPolynomial,  degree = 1)
cb$CenterBaselearner(bl_target = "speed_spline", bl_center = "speed_poly", keep = FALSE)
cb$removeBaselearner("speed_poly")
cb$train(10, trace = 0)
cb_eff = cb$getFeatEffectData(blearner_name = "speed_spline_|_speed_poly")
plot(cb_eff$feature, predict(test_hand, newdata = data.frame(speed=cb_eff$feature), which = 1), t = "l", col="red1",
xlab = "speed", ylab = "Additive Effect on dist", main = "Effect results - centered Learner", ylim = c(-10,10))
points(cb_eff$feature, cb_eff$effect, t = "l", col = "blue")
legend("top",legend = c("mboost","compboost"), fill = c("red","blue"))
test_hand = mboost(dist ~ bbs(speed, knots = 20, degree = 3, differences = 2, df = 4)
%-% bols(speed, intercept = TRUE, lambda=0), data = cars, control = boost_control(mstop = 10, nu = 0.3))
cb = Compboost$new(data = cars, target = "dist",loss = LossQuadratic$new(), learning_rate = 0.3)
cb$addBaselearner(feature = "speed", id = "spline", bl_factory = BaselearnerPSpline,  degree = 3, n_knots = 20, df = 4, differences = 2)
cb$addBaselearner(feature = "speed", id = "poly", bl_factory = BaselearnerPolynomial,  degree = 1)
cb$CenterBaselearner(bl_target = "speed_spline", bl_center = "speed_poly", keep = FALSE)
cb$removeBaselearner("speed_poly")
cb$train(10, trace = 0)
cb_eff = cb$getFeatEffectData(blearner_name = "speed_spline_|_speed_poly")
coef(test_hand)
coef(test_hand)[[1]]
plot(coef(test_hand)[[1]])
points(cb$getEstimatedCoef()[[1]])
plot(coef(test_hand)[[1]], col = "red", pch = 5)
points(cb$getEstimatedCoef()[[1]], col = "blue", pch = 3)
plot(coef(test_hand)[[1]], col = "red", pch = 5, ylim = c(-10,10))
points(cb$getEstimatedCoef()[[1]], col = "blue", pch = 3)
plot(coef(test_hand)[[1]], col = "red", pch = 5, ylim = c(-10,20))
points(cb$getEstimatedCoef()[[1]], col = "blue", pch = 3)
plot(coef(test_hand)[[1]], type = "b", col = "red", pch = 5, ylim = c(-10,20))
points(cb$getEstimatedCoef()[[1]], type = "b", col = "blue", pch = 3)
plot(coef(test_hand)[[1]], type = "b", col = "red", pch = 5, ylim = c(-20,20))
points(cb$getEstimatedCoef()[[1]], type = "b", col = "blue", pch = 3)
# OUTSIDE MODELS
# Baselearner 2
data_source_1 = InMemoryData$new(as.matrix(df_train$speed), "my_variable_2")
data_target_1 = InMemoryData$new()
linear_factory_1 = BaselearnerPolynomial$new(data_source_1, data_target_1, list(n_knots = 20, degree = 3, df = 4))
linear_factory_1 = BaselearnerPSpline$new(data_source_1, data_target_1, list(n_knots = 20, degree = 3, df = 4))
speed_4 = linear_factory_1$getData()
speed_4
# OUTSIDE MODELS
# Baselearner 2
data_source_1 = InMemoryData$new(as.matrix(df_train$speed), "my_variable_2")
data_target_1 = InMemoryData$new()
linear_factory_1 = BaselearnerPSpline$new(data_source_1, data_target_1, list(n_knots = 20, degree = 3, df = 4))
speed_4 = linear_factory_1$getData()
# time spline
data_source_2 = InMemoryData$new(as.matrix(df_train$speed), "my_variable_2")
data_target_2 = InMemoryData$new()
spline_factory_2 = BaselearnerPolynomial$new(data_source_2, data_target_2, list(degree = 1, intercept = TRUE))
speed_bols = spline_factory_2$getData()
speed_bols = BaselearnerPolynomial$new(data_source_2, data_target_2, list(degree = 1, intercept = TRUE))
speed_bols = spline_factory_2$getData()
BaselearnerCentered
centered = BaselearnerCentered$new(speed_4, speed_bols)
centered = BaselearnerCentered$new(speed_4, speed_bols, "Test")
speed_4
speed_4$getData()
# OUTSIDE MODELS
# Speed Spline
data_source_1 = InMemoryData$new(as.matrix(df_train$speed), "my_variable_2")
data_target_1 = InMemoryData$new()
speed_4_factory = BaselearnerPSpline$new(data_source_1, data_target_1, list(n_knots = 20, degree = 3, df = 4))
speed_4 = linear_factory_1$getData()
# Speed OLS
data_source_2 = InMemoryData$new(as.matrix(df_train$speed), "my_variable_2")
data_target_2 = InMemoryData$new()
speed_bols_factory = BaselearnerPolynomial$new(data_source_2, data_target_2, list(degree = 1, intercept = TRUE))
speed_bols = spline_factory_2$getData()
centered = BaselearnerCentered$new(speed_4_factory, speed_bols_factory, "Test")
centered$getData()
speed_4 =  bbs(speed, knots = 20, degree = 3, differences = 2, df = 4)
speed_4 =  with(df_train, bbs(speed, knots = 20, degree = 3, differences = 2, df = 4))
speed_4 =  with(df_train, bbs(speed, knots = 20, degree = 3, differences = 2, df = 4))
speed_bols = with(df_train, bols(speed, intercept = TRUE))
# OUTSIDE MODELS
# Speed Spline
data_source_1 = InMemoryData$new(as.matrix(df_train$speed), "my_variable_2")
data_target_1 = InMemoryData$new()
speed_4_factory = BaselearnerPSpline$new(data_source_1, data_target_1, list(n_knots = 20, degree = 3, df = 4))
speed_4 = linear_factory_1$getData()
# Speed OLS
data_source_2 = InMemoryData$new(as.matrix(df_train$speed), "my_variable_2")
data_target_2 = InMemoryData$new()
speed_bols_factory = BaselearnerPolynomial$new(data_source_2, data_target_2, list(degree = 1, intercept = TRUE))
speed_bols = spline_factory_2$getData()
centered = BaselearnerCentered$new(speed_4_factory, speed_bols_factory, "Test")
centered$getData()
mb_speed_4 =  with(df_train, bbs(speed, knots = 20, degree = 3, differences = 2, df = 4))
mb_speed_bols = with(df_train, bols(speed, intercept = TRUE))
mb_centered = mb_speed_4 %X% mb_speed_bols
mb_centered = mb_speed_4 %O% mb_speed_bols
mb_centered = with(df_train, mb_speed_4 %O% mb_speed_bols)
mb_centered = with(df_train, mb_speed_4 %X% mb_speed_bols)
mb_centered = with(df_train, mb_speed_4 %-% mb_speed_bols)
# mboost Case
source("~/Documents/3_LMU/2_Master/1_Code/4_tensors/baselearner_minus.R")
df_train
View(df_train)
mb_centered = with(df_train, mb_speed_4 %-% mb_speed_bols)
mb_centered = mb_speed_4 %-% mb_speed_bols
mb_centered = mboost(formula = dist ~ bbs(speed, knots = 20, degree = 3, differences = 2, df = 4) %-%
bols(speed, intercept = TRUE), data = df_train)
mb_centered
extract(mb_centered)
extract(mb_centered)[[1]]
mat_ext = extract(mb_centered)[[1]]
mb_mat == centered$getData()
mb_mat = extract(mb_centered)[[1]]
mb_mat == centered$getData()
centered$getData()
dim(centered$getData())
dim(centered$getData())
dim(mb_mat)
diff = mb_mat-centered$getData()
View(diff)
sum(diff)
